name: Integration

permissions:
  contents: read
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  integration:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}  # Only run if the build succeeded
    strategy:
      fail-fast: false
      matrix:
        rust:
         # - stable
          - nightly
         # - "1.82.0"
        platform:
          - ubuntu-latest
         # - windows-latest
         # - macos-latest
        features:
         # - "libei,wayland,xdo,x11rb"
         # - "default"
          - "libei"
         # - "wayland"
         # - "xdo"
         # - "x11rb"
       # exclude:
         # - platform: windows-latest
         #   features: "libei,wayland,xdo,x11rb"
         # - platform: windows-latest
         #   features: "libei"
         # - platform: windows-latest
         #   features: "wayland"
         # - platform: windows-latest
         #   features: "xdo"
          #- platform: windows-latest
          #  features: "x11rb"
         # - platform: macos-latest
         #   features: "libei,wayland,xdo,x11rb"
         # - platform: macos-latest
         #   features: "libei"
         # - platform: macos-latest
         #   features: "wayland"
         # - platform: macos-latest
         #   features: "xdo"
         # - platform: macos-latest
         #   features: "x11rb"
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          # If manually triggered, use the current commit (GITHUB_SHA), otherwise use the head_sha from the Build workflow
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}
     # - uses: ./.github/actions/install_deps
     # - uses: dtolnay/rust-toolchain@master
     #   with:
     #     toolchain: ${{ matrix.rust }}
      #    components: rustfmt, clippy

     # - name: Setup headless display for tests on Linux
     #   if: runner.os == 'Linux' # This step is only needed on Linux. The other OSs don't need to be set up
     #   uses: ./.github/actions/headless_display
      
     # - name: Set up container
     #   run: /local/bin/set-env.sh

      - name: Run tests
        run: |
            set +e

            sudo modprobe fuse

            # This function is used below to execute any shell command inside the running container.
            do_in_pod() {
              podman exec --user gnomeshell --workdir /home/gnomeshell gnome-shell-pod set-env.sh "$@"
            }
            
            podman run --rm --cap-add=SYS_ADMIN --cap-add=SYS_NICE --cap-add=IPC_LOCK --device /dev/fuse -v /dev/shm:/dev/shm --name gnome-shell-pod -td ghcr.io/schneegans/gnome-shell-pod-41:latest
            do_in_pod gsettings set org.gnome.shell welcome-dialog-last-shown-version "999"
            do_in_pod sudo dnf upgrade -y --refresh
            do_in_pod sudo dnf install -y firefox
            do_in_pod sudo dnf install -y cargo rust clippy
            do_in_pod sudo dnf install -y gcc make automake autoconf libtool
            do_in_pod sudo dnf install -y xdotool libxkbcommon-devel libXi-devel libXtst-devel ImageMagick
            # do_in_pod sudo dnf install -y xdg-desktop-portal xdg-desktop-portal-gtk xdg-desktop-portal-gnome polkit polkit-gnome


            do_in_pod export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus
            do_in_pod export DISPLAY=:99
            do_in_pod export WAYLAND_DISPLAY=:wayland-0

            podman cp ./. "gnome-shell-pod:/home/gnomeshell/"
            do_in_pod sudo systemctl restart polkit
            do_in_pod sudo systemctl status polkit
            do_in_pod systemctl --user start "gnome-wayland-nested@:99"
            sleep 10

            do_in_pod systemctl --user start xdg-desktop-portal
            echo "###########"
            do_in_pod systemctl --user status xdg-desktop-portal
            echo "###########"
            do_in_pod journalctl --user -u xdg-desktop-portal
            echo "###########"
            do_in_pod systemctl --user start xdg-desktop-portal-gnome
            echo "###########"
            do_in_pod journalctl --user -u xdg-desktop-portal-gnome
            echo "###########"
            do_in_pod systemctl --user status xdg-desktop-portal-gnome
            echo "###########"
            sleep 10
            do_in_pod journalctl -xe
            echo "###########"
            do_in_pod dbus-send --session --dest=org.freedesktop.portal.Desktop --type=method_call --print-reply / org.freedesktop.DBus.Introspectable.Introspect
                       
      - name: Rust stuff
        run: |
            # This function is used below to execute any shell command inside the running container.
            do_in_pod() {
              podman exec --user gnomeshell --workdir /home/gnomeshell gnome-shell-pod set-env.sh "$@"
            }

            do_in_pod mutter --version
            do_in_pod pwd
            do_in_pod ls
            do_in_pod CARGO_TERM_COLOR=always RUST_LOG=debug cargo test integration --release --no-default-features --features libei -- --test-threads=1 --nocapture --include-ignored
            #do_in_pod
            
            
            # podman exec --user gnomeshell --workdir /home/gnomeshell gnome-shell-pod set-env.sh "$@"
            # podman cp "${POD}:/opt/Xvfb_screen0" - | tar xf - --to-command "convert xwd:- ${WORK_DIR}/screen.png"
     


     # - name: Run integration tests in release mode
        #if: matrix.features != 'wayland' && matrix.features != 'libei' && matrix.features != 'libei,wayland,xdo,x11rb' # On Linux, the integration tests only work with X11 for now
     #   run: cargo test integration --release --no-default-features --features ${{ matrix.features }} -- --test-threads=1 --nocapture --include-ignored

     # - name: Upload capture as artifact
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: capture-image
      #    path: capture.jpg